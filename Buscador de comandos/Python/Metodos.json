[{".split(if delimiter) ": " devuelve una lista, si delimitier especifica que hay en el medio", ".delimiter.join(variable) ": " dado un delimiter especificado, concatena elementos", ".append(argumento) ": " agrega \"argumento\" a una lista y devuelve none", ".sort() ": " organiza alfabeticamente una lista y devuelve none", ".values() ": " busca en valores en el diccionario", ".keys() ": " devuelve las keys del diccionario", ".startswith(argumento) ": " empieza con \"argumento\"", ".rstrip() ": " elimina lineas en blanco", ".strip() ": " elimina espacios en blanco al inicio y final", ".count(argumento) ": " cuenta cantidad de veces que encuentra \"argumento\"", ".find(argumento) ": " devuelve el indice en el que se encuentra \"argumento\"", ".lower ": " vuelve todo a minusculas, devulve str", ".upper ": " vuelve todo mayusculas, devuelve str", ".capitalize ": " primera letra a mayusculas, devuleve str", ".replace(\"argumento\", \"argumento_1\") ": "  reemplaza todo argumento por argumento_1", ".pop(indice) ": " elimina el valor correspondiente al indice en una lista y devuelve valor eliminado", ".remove(\"argumento\") ": " busca y elimina el argumento, devulve none", ".extend(argumento) ": " toma un iterable como argumento y lo append a la lista", ".get(key, 0) ": " devuelve el value correspondiente en un diccionario, mas utilizado para cambiarle el value(.get(key, 0) = argumento)", ".translate(str.maketrans(\"\",\"\",deletestr)) ": " elimina todo lo que hay dentro de \"deletestr\" en str", ".reverse() ": " pone todo al reves chama", ".sort(reverse=True) ": " organiza todo al reves, devuelve none", ".items() ": " devuelve tuplas con la relacion keys-values en un diccionario", ".encode(arg) o b\"argumento\" ": "encodea a lo especificado en arg(por defecto creo que es utf8)(recordar que esto es s\u00f3lo necesario para binario, ya que archivos de texto python chupa y escupe en unicode)(A menos que se quiera hacer manual a otro)", ".decode(arg) ": " decodea a lo especificado en arg(revisar encode)", ".title() ": " capitaliza la primera letra de todas las palabras", ".with open(arumento) as \"nombre_de_variable\": ": " abre un documento y lo trata como \"nombre_de_variable\"", ".strftime((\"formato\", como %y-%m-%d %H:%m:%S))": "devuelve en forma de string el formato de hora previamente guardado.", "\"argument\".__doc__": "Siempre que argument sea una funcion retorna informacion sobre ella.", ".difference(\"arg\")": "permite la hallar los valor que estan en uno y no estan en otro.", ".index(\"arg\")": "devuelve el inidice de argumento en una lista.", "d1.update(arg)": "acepta un iterable de dice y lo une a d1.", ".endswith(arg)": "si termina en arg.", ".swapcase()": "intercambia las letras(mayusculas-minusculas)", ".isupper()-.islower()": "devuelve 1 o 0 si la letra es mayuscula o minuscula.", ".isalpha()": "si todo los caracteres de un string estan en el alfabeto.", ".seek(indice,opciones)": "permite moverse a traves de un archivo , hacia el indice especificado.Opciones es opcional, donde 0 es el default, 0,1,2 - inicio, actual lugar y final del stream.", ".read()": "lee todo un archivo como un solo string.", ".readlines()": "devuelve una lista de un archivo spliteado por delimiter \\n.", ".readline()": "lee una linea a la vez(some sort of next() aplicado a leer lineas de texto.", ".flush()": "hace que se ejecute los cambios realizados en un archivo abierto.", ".fileno()": "devuelve un int, fileno stand for file-number, donde 0,1,2 pertenecen a stdin,stdout and stderr, por lo que todo archivo cargado previamente adquieren un numero de ahi en adelante.", ".copy()": "para copiar un objeto, evitando asi tender a caer en problemas de modificar el objeto origonal.", ".insert(indice,objeto)": "inserta en una lista en el indice especificado el objeto especificado(redundancia al pecho).", ".any() ": "le pasa bool(x) a todo los elementos del iterable y devuelve True si aunque sea hay un verdadero, False si no hay ninguno.", ".all()": "le pasa bool(x) a todos los elementos frl iterable, devuelve True si todos son 1 o False si hay aunque sea un False."}]