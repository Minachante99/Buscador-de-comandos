[{"len(variable) ": " devuelve cantidad de valores o caracteres de \"argumento\"", "sum(variable) ": " suma todos los valores en listas", "exit() ": " termina el programa", "list(variable) ": " convierte strings a lista y sin variable crea una lista", "dict() ": " crea un diccionario", "tuple() ": " crea una tupla", "min(variable) ": " devuelve el minimo", "max(variable) ": " devuelve el maximo", "del \"argumento a borrar\" ": " elimina el valor, devulve none", "dict[argumento] ": " argumento_1 - a\u00f1ade \"argumento\"(key)  = \"argumento_1\"(value)", "open(argumento, parametro) ": " abre archivo \"argumento\"(con direccion) bajo un parametro \"r\", \"w\", \"a\" or \"wb\" / como lectura, crea un archivo de texto, permite agregarle strings a un documento dado y un archivo binario respectivamente.", "from ... import ": " definir \"...\" desde donde se desea importar algo chama", "as ": " crea un alias para ese objeto ( import pizzas \"as\" el_pene)", "__init__ ": " overloading operator, el constructor en las classes, initiliza parametros", "super() ": " ayuda a python a saber que eso proviene de una clases superior", "+": " concatena listas o tuplas - devuelve una lista o tupla", "round(\"variable\",\"cantidad_de_digitos_despues_de_la_coma\")": "redondea la variable a la cantidad de digitos especificada.", "\"%s\"": "formatea algo a str, acepta diccionarios siempre y cuando las claves coincidan(se debe escribir entre par√©ntesis).", "set([])": "acepta una lista, devuelves los valores como una colleccion de elementos unicos(chapea los repetidos) y de forma no ordenada).", "isinstance(x,A)": "toma por \"x\" cualquier objeto y comprueba que este pertenezca a \"A\". Devuelve un booleano.", "dir(arg) and help(modulo)": "con dir expande las distintas funciones que acepta el argumento; help muestra informacion sobre el modulo o demas.", "sorted()": "devuelve ordenado, para utilizar en sets y diccionarios.", "enumerate(arg)": "en un ciclo devuelve (index,valor) para el iterable que se le pase, como una lista, siendo el resultado una lista de tuplas.", "ord()": "acepta un character como argumento y devuelve su numero correspondiente en formato unicode.", "chr()": "acepta un numero como argumento y devuelve su character correspondiente.", "bin(),oct(),hex()": "aceptan un integer como argumento y devuelve su equivalente en binario(base 2), octadecimal(base 8)) y hexadecimal(base 16).", "pow(#, exponente)": "eleva numero a exponente, si ecxponente es antecedido por un '.' halla raiz.", "zip(arg_1, arg_2)": "toma dos listas como argumentos y hace corresponder cada uno de sus argumentos por su indice(0:0,1;1), devuelve tuplas.", "filter(func,objeto)": "pasandolo dentro de una funcion list() crea una lista de todos los objetos que cumplen con la func.", "map(func,objeto)": "pasado dentro dw una func list() crea una lista collecionando los resultados de la aplicacion de lafunc a los objetos.", "__str__ and __repr__": "overloading operators, se encarga de pescar los prints y str, se usa como metodo en las clases, lo que esta funcion devuelva es lo que se printeastr y __repr__ es el default en modo interactivo.", "__getitem__": "overloading operator, pesca los index y slices, tambien los iteratos pero pa eso no sirve.", "iter(arg) and next(arg)": "para crear iterators manual, el arg in iter se convierte en un iterator que se puede atravesar a traves de next(), un loop manual, ellos llaman a __iter__ and __next__ reapecticamente", "__contains__": " overloading operator, se usa para membresia.", "__getattr__": "overloading operapor, se utiliza para pescar atributos no definidos en la clase y no asociados a la instancia.", "__add__, __radd__ and __iadd__": "overloading operators, se utilizan para pescar la suma: suma de instancias(que a su vez llama a __radd__) o instancia a la izquierda; suma con la instancia a la derecha; y suma inplace, respectivamente.", "__sub__": "overloading operator, se usa para pescar la resta.", "__call__": "overloading operator, sirve para intercepter llamadas, sirve como una herramienta mas general, sin tener que definir un metodo nuevo.", "__lt__ and __gt__": "overloading operator, se utilizan para pescar comparaciones del tipo < and >, de utilizarae amboa deben ser definidos.", "__eq__ and __ne__": "overloading operator, se usan para pescar comparaciones del tipo == and !=, ambos deben ser definidos.", "__bool__ and __len__": "overloading operator, se utilizan pararapar pruebas dw booleanos, se prefiere a bool antes que a len", "getattr(instancia,y)": "se usa generalmente en delegacion, en clases, pasa argumento y a instancia.", "__and__ and(ggg) __or__": "overloading operator, se utilozan para pescar interseccion y union respectivamente.", "__slots__ = [arg]": "se utiliza al tope de la clase, en argumento se escriben los nombres de los atributos que seran asociados a las instancias, las instancias SOLO podran utilizarr atributos con los nombres antes declarados.", "staticmethod(method)": "acepta un static method como argumento(method que no se le pasa una instancia y que solo puede ser llamado mediante NombreDeClase.method()) y hace que este puede ser llamado mediante instancias tambien. Se define a nivel de metodo(al mismo nivel que se escriben las funciones en una clase(method = staticmethod(method). ", "exec(string)": "ejecuta string como si fuese python code."}]