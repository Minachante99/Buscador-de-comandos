[{"import random ": " random.randint(range) : selecciona un int random in \"range\", random.choice(variable) : selecciona pseudoaleatoriamente", "import string ": " string.punctuation : signos de puntuacion, string.ascii_upper(lower)case, para trabajar con el abecedario", "import math ": " math.sin(variable) : halla el seno de \"variable\", math.sqrt(variable) : halla raiz cuadrada de \"variable\", math.pi: invoca pi para trabajar con el", "import re ": " re.search(argumento, variable) : busca \"argumento\" en la variable especificada, re.findall(argumento, variable) : devuelve una lista de todos los strings \"argumento\" encontrados en variable", "import urllib.request, urllib.parse, urllib.error ": " importa la libreria urllib(request : pedir archivos, parse : leer estos archivos, error : posibles errores), urllib.request.urlopen(argumento) : solicita \"argumento\" a ese servidor y lo trata como un archivo local; urllib.request.urlretrieve(link,nombre_del_archivo): descarga el archivo y le da nombre", "import sqlite3 ": " sqlite3.connection(): conecta con la base de datos especificada, .cursor(): permite trabajar con la base de datos, .commit(): fuerza los cambios hechos en la base de datos, .execute(query): ejecuta el query introducido, .close() cierra la conexcion con la basede datos. ", "import Json ": " json.dump(\"argumento_1\", \"argumento_2\"): guarda \"argumento_1\" en el archivo \"argumento_2\", json.load(\"argumento\") : carga \"argumento\" previamente cargado con open() y devuelve todo lo dentro del json", "import platform": "platform.python_version() : muestra la version de python actual; platform.architecture() : muestra la arquitectura del sistema(32-64bits).", "import sys": "Se utiliza principalmente en programaci\u00f3n orientada al sistema(M\u00e1s sobre el tema en SystemProgramming).", "import datetime": "datetime.datetime.now() : retorna la fecha y hora actual, datetime.date() : acepta fechas para hacer calculos,datetime.date.today() : devuelve la fecha actual", "import calendar": "calendar.month(\"year\",\"month\") : devuelve el mes completo de ese a\u00f1o.", "import this": "el zen de python.", "import os": "Se utiliza en la programaci\u00f3n orientada al sistema.", "import multiprocessing": "Es para levantar procesos independientes, es una alternativa al fork/exce en Linux , trabaja de manera similar al m\u00f3dulo threading,tiene una clase Thread and Loco y m\u00e1s en 6,multiprocessing.cpu_count() : retorna un int con la cantidad de cpu usandose.", "import cProfile": "muestra estadisticas sobre cuantas veces y por cuanto tiempo fueron ejecutadasvarias partes del programa; cProfile.run(arg) : en arg especificamos la funcion, debenhams ser pasada como un string.", "import decimal": "decimal.Decimal(arg) : para calcular decimales con mayor precision(floats), decimal.getcontext()prec= # : fija globalmente a cuantos decimales despues de la se trabajan las salidas(para hacerlo temporal utilizar con with).", "import pickle": "pickle.dump(arg_1, arg_2) : se usa para guardar objetos de python en un archivo sin tener que cambiar formatos, toma como argumento 1 lo que se va a guardar y argumento 2 donde, el cual debe ser un archivo .pkl. pille.load: para cargar archivos pkl.pkl", "import glob": "para buscar archivos dentro se la carpeta dondw ae ejecuta el codigo, glob.glob('arg') : devuelve una lista con todos los nombres de archivos que encajan.", "import shelve": "se utiliza para guardar objetos de python sin tener que modificarlos. shelve.open(arg): abre un bd nueva, de estar la abre de lo contrario la crea.", "import time": "turbiedad, time.sleep(#) : detiene el proceso segun el numero de segundos introducidos.", "import __thread": "para trabajar con threads(lightweight)(ronnie), creando varios threads en un mismo programa llamando funciones dentro de ellos.Todos comparten el mismo standard output", "import threading": "se usa para manejar threads a alto nivel, que en muchos de sus casos usa internamente a _thread. La gran diferencia es que este es usado en OOP, para customizar clases, para heredar de una clade Thread, donde podemos customizar su __init__ y la funcion run(), que mediante un metodo start llama a run.", "import queue": "es un bolsillo dimensional que es usafdo por los threads para leer y guardar cosas. Metodos en 6.", "import webbrowser": "par abrir archivos html con el browser predeterminado del dispositivo. webbrowser.open(file) : abre el archivo; webbrowser.open_new(path): con direccion exaccta", "import pandas": "pandas se usa pra procesar datos utilizando de fondo numpy.", "import numpy": "para trabajar con numeros, ta potente.", "import matplotlib.pyplot": "para visualizar datos.", "import seaborn": "para visualizar data, pone matploylib mas bonito(uwu).", "import PIL": "para trabajar con imagenes; PIL.Image.open(arg) cargar la foto.", "import sklearn": "importa scikit-learn, para trabajar con machine learning. Revisar adentro todas las ramas y clases en la cheat sheat.", "import thefuzz": "para turbiedad(so far); thefuzz.fuzz.partial_ratio(arg1,arg2) : se usa para calcular Levenshtein distance between two cadenas de caracteres(strings) calculando el peque\u00f1o con respeco al grande.", "import scipy": "libreria para tallas cienificas; stats.linregress(x,y) regresion lineal entre esas dos variables para estimar a futuro; scipy.stats.trim_mean(obj,percent) : para hallar el trimmed mean que es quitar un porcentaje de datos a cada lado(mas pequenos y mas grandes) siendo esto mas robusto que el promedio normal; scipy.stats.probplot(data,plot= ax) - para plotear la distribucion normal, en plot hay que especificar el subplot.", "import joblib": "para salvar y cargar archivos manteniendo su forma original de objetos de python(que supuestamente trabaja mas rapido que pickle ya que esta optimizado para arrays); joblib.load(arg) : carga arg; joblib.dump(arg,file) : salva arg en nombre de archivo(.joblib).", "import mlxtend": "so far para plotear decisions boundaries de los modelos(zona de decisiones confusas ggg); mlxtend.plotting.plot_decision_regions(X,y,clf): en clf especificamos la instancia de modelo.", "import xgboost": "para trabajar con XGBClassifier() el cual es un ensemble model mejorado.", "import nltk": "la libreria mas usada para analisis de sentimientos en Natural Language Processing(NLP); tokenize.word_tokenize(x): tokeniza las palabras dentro de x; corpus.stopwords.words(language): devuelve las palabras de stop en el lenguaje especificado; sentiment.vader.SentimentIntensityAnalyzer: para analizar oraciones, SentimentIntensityAnalyzer'sobj.polarity_scores(sentence):analisa la oracion, devuele un dict..", "import ast": "literal_eval(arg) - so far: le quita las comillas a arg(no se si hay que importar el modulo ast).", "import tensorflow": "para trabajar con machine learning mas profundo(Neural Networks(NN),Natural Language Processing(NLP)).", "import hyperopt": "libreria de optimizacion de hyperparameters, se el modulo hyperopt.hp.(uniform,quniform,loguniform): para seleccionar valores entre un min/max."}]