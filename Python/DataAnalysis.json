[{"numpy.array(object)": "convierte un objeto a un array. Se puede especificar el tipo del array como segundo argumento de la funcion(dtype=numpy.float).Los array deben tener ffirmas iguales o en caso e ser diferentes debe de especificado en el tipo.", "array.dtype": "devuelve el tipo de array(int8,float,int64). ", "array.shape": "devuelve una tupla de forma(# de matrices(default=1),# de filas(default=1), # de columnas).", "array.ndim": "devuelve las dimensiones del array.", "array.size": "devuelve la cantidad de elementos del array.", "array.mean()": "calcula el promedio, en caso de especificar axie para calcular segun dimensiones(0: columns, 1:rows,etc).", "array.std()": "halla el Standard derivation que es la ra\u00edz cuadrada del promedio.", "numpy.arange(#)": "el range de numpy.", "numpy.random.random(size=#)": "crea un array de n\u00fameros entre 0 y 1 con la cantidad de elementos especificado en size(default=1).", "numpy.random.rand(#m,#r,#c)": "crea un array con el shape especificado(# de matrices, # de rows and # de columns) siendo llenado por n\u00fameros entre 0 y 1,la version np.random.random_sample toma el shape de otro array.", "numpy.random.randint(#,size=)": "funciona igual que el randint del modilo random, en size se puede especificar cu\u00e1ntos n\u00fameros queremos.", "numpy.linspace(start,stop,dividendo+1)": "so far: ni idea.", "numpy.identity(orden)": "crea la matriz identidad.", "numpy.eye(#r,#c)": "crea una matriz identidad turbia.", "numpy.zeros(shape) and numpy.ones(shape)": "crean matrices rellenas de ceros o unos respectivamente. Ambas poseen la opci\u00f3n nombre_like(array) tomando el shape and Type of that array.", "arrayA.dot(arrayB)": "multiplicaci\u00f3n e matrices(recuerda que para ser multipicable el numero de columnas debe ser igual al n\u00famero de filas) o arrayA @ arrayB.", "array.T": "halla la transpuesta del array. ", ".reshape(shape)": "reestructura un array a la especificada.", "pandas.Series()": "clase que se inicializa con una lista o diccionario, el indice por defecto es num\u00e9rico, y en caso de ser un dicc toma las claves como indice; tambi\u00e9n puede ser especificado por el atributo index, el atributo name permite darle un nombre a la lista; el objeto inizializado funciona como un array de numpy; atributo iloc permite fetchear posici\u00f3n in importar que sea un dicc;instancia.sort_values() sortea los valores; inst.duplicated() devuelve 0 or 1 segun valores repetidos, subdet=[columna] para specificar; inst.drop_duplicated() dropea repetidos; inst.count() cuenta todos los datos; inst.median() : devuelve la mediana; inst.quantile(%): devuelve el porciento especificado; inst.mode(): devuelve el valor mas usado.", "numpy.log(array)": "halla el logaritmo natural de cada objeto.", "pandas.DataFrame()": "es una clase que es una combinaci\u00f3n de pandas.Series, cada columna es una de ellas, si toma un diccionario toma las claves como nombre de columnas y los valores como arrays(Series), soporta casi todo igual que un array; instancia.info() muestra informaci\u00f3n general, instancia.describe() muestra algunas estad\u00edsticas generales de los datos; mediante instancia.iloc se slicea sequencialemnte y instancia.loc lo hace mediante indice, y el indice normal(instancia[]) retorna una columna;instancia.drop([]) devuelve la instancia pero sin lo dropeado;instancia.rename para cambiar nombre de objetos(obviamente);el argumento inplace=True hace los cambios permanente; instancia.head(n) muestra los primeros n elementos del sataframe,n=5 default y tail hace lo mismo pero desde el fondo; instancia.set_index=arg cambia el \u00edndice a lo indicado(otra columna); instancia.dropna(arg) elimina las fila que tengan al menos un valor nulo, en la opciones de arg se puede cambiar; instancia.fillna(arg) rellena los valores nulos con arg, cualquier cosa, con 'method=bfill or ffill' rellena autom\u00e1tico con los valores cercanos en la tabla; inst.unique() el DISTINTIC de SQL en pandas;inst.value_counts() cuenta la cantidad de valores distintos; inst.replace(old,new) cambia old for new; inst.to_csv(path) permite guardar como csv; inst.groupby(arg): agrupa por unique y se le puede pasar otro argumento por el que se quiera diferenciar los datos;inst.sample(#): muestra 10 records aleatorios, inst.merge(dataframe,on=col) une esta inst con otro data frame por la columna que tengan igual especificada en on; inst.astype(type) : devuelve esa columna convertida al otro pe especificado.", "pandas.read_csv(path,args)": "lee y parsea un documento csv especificado en path, y un brollo de distintos argumentos, para ellos leer m\u00e1s en la documentaci\u00f3n de pandas.Devuelve una instancia de DataFrame con los datos le\u00eddos. Algunos son: header=none para que pandas no tome default la primera l\u00ednea como nombres de las columnas;names=[args] le pone nombre a las columnas; index_col=# permite set_index; parse_dates=True detecta y cambia a datetime todas las fechas; na_values=[valores a tomar] convierte los datos que contengan lo especificado en NaN;sep=delimiter para especificar un delimiter distinto a la coma; skip_blank_line=1 para saltarse l\u00edneas en blanco.", "pandas.to_datetime(arg)": "cambia el Type de un objeto a fecha y tiempo. Acepta los attributos day,month and year y devuelve esa parte de la fecha y lo mismo para las horas.Para usar en series se debe usar 'dt.'+atributo. Si el formato no es Y-M-D(Iso 860) se debe especificar el formato.", "pandas.isnull() or pandas.isna()": "devuelve 1 o 0 Si arg es vac\u00edo(numpy.nan). Se utiliza ac\u00e1 saber si tenemos datos vac\u00edos(Si faltan datos) combinandose con funciones como sum() para saber totales.El opuesto es pd.notnull() or pd.notna()", "pandas.read_sql(query,conexion)": "permits leer se una query SQL y llevarlo a un DF.", "pandas.read_sql_table(nombre_dela_tabla,conexion)": "permits leer today una tabla de una base de datos.", "pandas.read_html(args)": "para leer tablas de un archivo html, parsea elrsea html completo. ", "pandas.read_excel(args)": "para leer excel files.", "numpy.full(shape,arg)": "llena una matriz con arg, la versi\u00f3n full_like(array,arg) toma el shape de array.", "numpy.var(array)": "devuelve la variaci\u00f3n en el array.", "matplotlib.plot(x,y)": "crea un chart representando los valores con cordenadas x,y.Acepta argumentos como c= : color de las lineasd; ls= : style de las l\u00edneas; marker= : marcador donde e encuentran los puntos de los ejes. ", "matplotlib.xlabel(arg) and matplotlib.ylabel(arg)": "permite darle nombres(args) A las dimensiones(x and y respectivamente).", "matplotlib.title(arg)": "para darle nombre al chart.", "matplotlib.legend(arg)": "leyenda de los gatos representados.", "matplotlib.figure(figsize=tupla)": "define el tama\u00f1o el gr\u00e1fico.", "seaborn.set_style(arg)": "para definir el estilo ae utilizar en arg.('whitegrid','darkgrid').", "seaborn.scatterplot(x,y)": "un gr\u00e1fico pero con puntos, para comparar teniendo en cuenta puntos de presi\u00f3n. hue=: para tener un tercer argumento; s=: tama\u00f1o,ax=: para especificar subplot.", "matplotlib.hist(x)": "crea un histograma representando una serie de datos. bins=: para cambiar en cuantas partes se divide el gr\u00e1fico(default=10), puede ser un rango tambi\u00e9n(no.arange); alpha =: para la opacidad;sticker = True: para cuando se muestran varios hist en una misma funci\u00f3n plt diferencie cada uno.", "matplotlib.bar(x,y)": "muestra un gr\u00e1fico de barras pero que cada valor es una barra.datos", "seabron.barplot(x,y)": "como el groupby de pandas pero le pasa mean() a 'y' and muestra con una l\u00ednea la variaci\u00f3n; hue= 3de argumento; ax=: subplot.", "seaborn.pivot(index y,index x, data)": "esto s un m\u00e9todo de sns que se le pasa a cualquier dataset.Devuelve el contenido en forma de matriz.", "seaborn.heatmap(data)": "crea un heatmapea(un pene). cmap=: para cambiar la paleta e colores; annot=True muestra cada valor en el blo1ue que le corresponde, ax=: subplot.", "matplotlib.imshow(arg) abre una imagen previamente convertida a np.arra": "atplotlib.imshow(arg) abre una imagen previamente convertida a np.array.", "matplotlib.grid(False)": "quita las l\u00edneas horizontales en plt.", "matplotlib.axis('off')": "para no mostrar datos en los axis.", "matplotlib.tight_layout(pad=#)": "permite separar m\u00e1s las fig.", "matplotlib.subplots(shape)": "devuelve una tupla de (funcion_plot,np.array) siendo la fig lo mostrable y lo segundo un array con todos los sublplots. sub.set_xlabel(arg) and sub.set_ylabel(arg) = plt.xlabel(arg) y plt.ylabel(arg) respectivamente; sub.set_title = plt.title; figsize=tupla para cambiar el tama\u00f1o; sub.set_xticks([]) and sub.setyticks([]) = plr.axis('off').", "matplotlib.show()": "muestra la figura", "np.isfinite(array)": "devuelve un array filled con True p False de testeando si cada uno de los elementod es finito o no.", "numpy.isinf(array)": "devuelve un array filled with True and False for every element of the array if it is infinite or not.", "pandas.concat([df1 or s1, df2 or s2])": "concatena dos dataframes or two series.", "(df or s).squeeze()": "metodo que se usa cuando no se sabe si lo que se esta importando es una dataframe or a series pero si se sabe que lo que tiene es una sola columna, rebaja el objeto a una serie."}]